openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: '${HOSTED_ZONE_PROTOCOL}://${HOSTNAME}/${APPLICATION_NAME}'
  - description: Mosaic dev server
    url: https://vspcepapi.corp.cox.com/dss-evaluation/homehealthAPI/1.0.0
info:
  description: This is a mosaic home health API
  version: '1.0.0'
  title: Mosaic NBAPI home health API
  contact:
    email: harry.tang@cox.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
security:
  - BasicAuth: []
paths:
  /nbapi/disposition/{variant}/{version}/{siteId}/{dispObjectType}/{dispObjectId}:
    get:
      tags:
        - developers
      summary: get device or home health status
      operationId: getHealthStatus
      description: |
        By passing variant HV_HOME_HEALTH and home account to get the home health status after evaluating all the devices under the home account 
        By passing variant HV_HOME_HEALTH and device id to get the device health status after evaluating historical or realtime device health metrics.
      parameters:
        - in: header
          name: x-trackingid
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: variant
          description: either HV_HOME_HEALTH or PV_PLANT_HEALTH
          required: true
          schema:
            type: string
            enum: [HV_HOME_HEALTH, PV_PLANT_HEALTH]
        - in: path
          name: version
          description: API version
          required: true
          schema:
            type: string
        - in: path
          name: siteId
          description: site id, e.g. 1, 136,
          required: true
          schema:
            type: integer
            format: int32
        - in: path
          name: dispObjectType
          description: enum (PLANT, HOME, SETTOPBOX, EMTA, ECM, HOMEWIRING, ONT, DATA_SERVICE, CABLE_SERVICE, TELEPHONE_SERVICE, HL_SECURITY_SERVICE, HL_AUTOMATION_SERVICE)
          required: true
          schema:
            type: string
            enum:
              [
                PLANT,
                HOME,
                SETTOPBOX,
                EMTA,
                ECM,
                HOMEWIRING,
                ONT,
                DATA_SERVICE,
                CABLE_SERVICE,
                TELEPHONE_SERVICE,
                HL_SECURITY_SERVICE,
                HL_AUTOMATION_SERVICE,
              ]
        - in: path
          name: dispObjectId
          description: based on the object type above, this is unique id for the disposition object. it can extend th list of object id by proper serialization.
          required: true
          schema:
            type: string
            example: aa:bb:cc:dd:ee:ff
        - in: query
          name: realtime
          description: boolean parameter indicating if realitme collection is true or false.
          schema:
            type: boolean
        - in: query
          name: group
          description: determine scope of return metrics.
          schema:
            type: string
            enum: [basic, advanced, complete]
      responses:
        '200':
          description: 200 OK. Indicates that the Mosaic server received the request, was able to process it, and there is data to return to the caller.
          headers:
            x-trackingid:
              $ref: '#/components/headers/X-trackingid'
            executionTimeInMillis:
              $ref: '#/components/headers/ExecutionTimeInMillis'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/StatusDef'
                    example:
                      statusCode: '200'
                      statusMessage: 'OK'
                  # the following should be listdispositionlist, check wiht dev team.
                  # but I think the deve team may have changed the return structure, for skinny api, they directly return the disposition record for the device.
                  listDispositionRecordList:
                    type: array
                    items:
                      type: object
                      properties:
                        dispositionRecordList:
                          type: array
                          items:
                            $ref: '#/components/schemas/DispositionRecord'

        '204':
          description: 204 No Content. Indicates that the Mosaic server received the request, processed it successfully but there was no data to return.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/StatusDef'
                example: { 'statusCode': '204', 'statusMessage': 'NO CONTENT' }
        '400':
          description: 400 Bad Request. Indicates that the request to the Mosaic was formatted incorrectly or didnâ€™t contain all required information. This is a client error and indicates a problem with the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/StatusDef'
                example: { 'statusCode': '400', 'statusMessage': 'Bad Request' }
        '408':
          description: 408 Timeout. Indicates the server took too long to response to the request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/StatusDef'
                example: { 'statusCode': '408', 'statusMessage': 'TIMEOUT' }
        '500':
          description: 500 error is considered a Mosaic server error and should be reported to the Mosaic server team. The Mosaic should handle all error conditions and return one of the other error codes above along with information about why the request could not be a processed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/StatusDef'
                example: { 'statusCode': '500', 'statusMessage': 'INTERNAL SERVER ERROR' }

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  headers:
    X-trackingid:
      description: transaction id
      schema:
        type: string
        format: uuid
    ExecutionTimeInMillis:
      description: the API execution tim ein milli seconds
      schema:
        type: number
        format: float

  schemas:
    StatusDef:
      type: object
      description: containing statuscode and statusmessage
      properties:
        statusCode:
          type: string
        statusMessage:
          type: string
    DispositionRecord:
      type: object
      required:
        - dispObjectType
        - dispObjectId
      properties:
        dispObjectType:
          description: for XiD/Xi6 devices, the dispObjectType should be SETTOPBOX
          type: string
          enum:
            [
              PLANT,
              HOME,
              SETTOPBOX,
              EMTA,
              ECM,
              HOMEWIRING,
              ONT,
              DATA_SERVICE,
              CABLE_SERVICE,
              TELEPHONE_SERVICE,
              HL_SECURITY_SERVICE,
              HL_AUTOMATION_SERVICE,
            ]
          example: SETTOPBOX
        dispObjectId:
          type: string
          example: aa:bb:cc:dd:ee:ff
        state:
          type: string
          example: connected
        deviceStatus:
          type: string
          example: Online
        healthStatus:
          type: string
          example: Healthy
        evaluationTimeStamp:
          description: ISO 8601 datetime format
          type: string
          format: date-time
          example: '2020-07-07T22:57:27.424Z'
        pollingTimeStamp:
          description: ISO 8601 datetime format
          type: string
          format: date-time
          example: '2020-07-07T22:57:26.424Z'
        supportingDetails:
          $ref: '#/components/schemas/SupportingDetails'
    SupportingDetails:
      type: object
      required:
        - detailSummaryList
      properties:
        detailSummaryList:
          description: list of detailed summary
          type: array
          items:
            $ref: '#/components/schemas/MapComponent'
          example: [{ 'REASON': 'XiD is Healthy' }]
        concernList:
          description: list of concerns
          type: array
          items:
            $ref: '#/components/schemas/MapComponent'
          example: [{ 'IMPAIRMENT_DEVICE_ID': '74:56:12:CA:31:96' }]
        restInfoList:
          description: list of rest informaiton for the associated object, e.g. device object, provide the vendor, make, model, collected metrics....
          type: array
          items:
            $ref: '#/components/schemas/MapComponent'
          example: [{ 'DEVICE_TYPE': 'XiD', 'DEVICE_MODELMAKE': 'CISCO', 'PHY_TX_RATE': '600' }]
    MapComponent:
      type: array
      items:
        type: object
        properties:
          key:
            description: key for the name of name-value pair
            type: string
            example: parameter_name
          value:
            description: value of the name-value pair
            type: string
            example: parameter_value
